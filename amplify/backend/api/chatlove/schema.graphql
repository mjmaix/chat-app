type ClUser
  # @model(subscriptions: null)
  @model
  @auth(rules: [{ allow: owner, ownerField: "id", queries: null }]) {
  id: ID!
  conversations: [ClConvoLink]
    @connection(name: "UserLinks")
    @auth(rules: [{ allow: owner, ownerField: "id" }])
  messages: [ClMessage]
    @connection(name: "UserMessages")
    @auth(rules: [{ allow: owner, ownerField: "id" }])
  givenName: String!
  familyName: String!
  email: String!
  avatar: String
  identityId: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ClConversation
  @model(mutations: { create: "createClConvo" }, subscriptions: null)
  @auth(rules: [{ allow: owner, ownerField: "members" }]) {
  id: ID!
  messages: [ClMessage] @connection(name: "ConvoMsgs", sortField: "createdAt")
  associated: [ClConvoLink] @connection(name: "AssociatedLinks")
  name: String!
  members: [String!]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ClMessage
  @model(subscriptions: null, queries: null)
  @auth(rules: [{ allow: owner, ownerField: "author" }]) {
  id: ID!
  author: ClUser @connection(name: "UserMessages")
  content: String!
  conversation: ClConversation!
    @connection(name: "ConvoMsgs", sortField: "createdAt")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ClConvoLink
  @model(
    mutations: { create: "createClConvoLink", update: "updateClConvoLink" }
    queries: null
    subscriptions: null
  ) {
  id: ID!
  user: ClUser! @connection(name: "UserLinks")
  clConvoLinkUserId: String
  conversation: ClConversation! @connection(name: "AssociatedLinks")
  clConvoLinkConversationId: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Subscription {
  onCreateClMessage(members: [String!]!): ClMessage
    @aws_subscribe(mutations: ["createClMessage"])
  onCreateClConversation(members: String!): ClConversation
    @aws_subscribe(mutations: ["createClConvo"])
}
